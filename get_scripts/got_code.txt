------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/tailwind.config.js

// tailwind.config.js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/postcss.config.js

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/App.tsx

import React, { useState } from 'react';
import { Modal } from './components/Modal';
import { Preview } from './components/Preview';
import ChatbotPopup from './chatbot/ChatbotPopup';
import './index.css';

const App: React.FC = () => {
  const [selectedElement, setSelectedElement] = useState<HTMLElement | null>(null);

  const handleElementClick = (event: React.MouseEvent<HTMLElement>) => {
    event.stopPropagation();
    setSelectedElement(event.currentTarget);
  };

  const closeModal = () => setSelectedElement(null);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-800 p-4">
      <h1 className="text-2xl text-gray-300 font-bold mb-4">React Component Generator</h1>
      <Preview onElementClick={handleElementClick} />
      {selectedElement && <Modal element={selectedElement} closeModal={closeModal} />}
      <ChatbotPopup />
    </div>
  );
};

export default App;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/main.tsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/App.css

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/index.css

/* ./src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/ToolSelector.tsx

// frontend/src/chatbot/ToolSelector.tsx

import React, { useState, useRef, useEffect } from 'react';

interface ToolSelectorProps {
  selectedTools: string[];
  onToolsChange: (tools: string[]) => void;
  tools: string[];
}

const ToolSelector: React.FC<ToolSelectorProps> = ({
  selectedTools,
  onToolsChange,
  tools,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const handleToolChange = (toolName: string) => {
    const newSelectedTools = selectedTools.includes(toolName)
      ? selectedTools.filter((name) => name !== toolName)
      : [...selectedTools, toolName];
    onToolsChange(newSelectedTools);
  };

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  const handleClickOutside = (event: MouseEvent) => {
    if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <div ref={dropdownRef} className="relative inline-block text-left">
      <button
        type="button"
        className="inline-flex justify-center w-full rounded-md border border-gray-600 shadow-sm px-4 py-1 bg-gray-800 text-sm font-medium text-white hover:bg-gray-700 focus:outline-none"
        id="tools-menu"
        aria-haspopup="true"
        aria-expanded={isOpen}
        onClick={toggleDropdown}
      >
        Tools
        <svg
          className="-mr-1 ml-2 h-5 w-5"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fillRule="evenodd"
            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
            clipRule="evenodd"
          />
        </svg>
      </button>
      {isOpen && (
        <div
          className="origin-bottom-right absolute right-0 bottom-full mb-2 w-56 rounded-md shadow-lg bg-gray-800 ring-1 ring-black ring-opacity-5"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="tools-menu"
        >
          <div className="py-1" role="none">
            {tools.map((toolName) => (
              <label
                key={toolName}
                className="block px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white"
              >
                <input
                  type="checkbox"
                  checked={selectedTools.includes(toolName)}
                  onChange={() => handleToolChange(toolName)}
                  className="mr-2"
                />
                {toolName}
              </label>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ToolSelector;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/ChatbotPopup.tsx

// frontend/src/chatbot/ChatbotPopup.tsx

import React, { useState, useEffect } from 'react';
import { Rnd } from 'react-rnd';
import Chatbot from './Chatbot';

const ChatbotPopup: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [size, setSize] = useState({ width: 500, height: 600 });
  const [position, setPosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    if (isOpen) {
      setSize({ width: 500, height: 600 });
      setPosition({
        x: window.innerWidth - 520,
        y: window.innerHeight - 620,
      });
    }
  }, [isOpen]);

  const toggleChatbot = () => {
    setIsOpen(!isOpen);
  };

  return (
    <>
      {isOpen ? (
        <Rnd
          size={size}
          position={position}
          onResize={(e, direction, ref, delta, position) => {
            setSize({
              width: ref.offsetWidth,
              height: ref.offsetHeight,
            });
          }}
          onDragStop={(e, d) => {
            setPosition({ x: d.x, y: d.y });
          }}
          minWidth={400}
          minHeight={500}
          maxWidth={800}
          maxHeight={1000}
          bounds="window"
          className="fixed z-50 bg-gray-800 rounded-lg shadow-lg border-2 border-gray-600"
        >
          <div className="flex flex-col h-full">
            <div className="flex justify-between items-center p-4">
              <h2 className="text-lg font-semibold text-white">Rons Web Builder</h2>
              <button
                onClick={toggleChatbot}
                className="text-gray-400 hover:text-white focus:outline-none"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="w-6 h-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="m4.5 4.5 15 15m0 0V8.25m0 11.25H8.25"
                  />
                </svg>
              </button>
            </div>
            <div className="flex-grow overflow-y-auto">
              <Chatbot />
            </div>
          </div>
        </Rnd>
      ) : (
        <button
          onClick={toggleChatbot}
          className="fixed bottom-4 right-4 z-50 p-2 bg-gray-800 text-white rounded-full shadow-lg focus:outline-none"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className="w-12 h-12"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.068.157 2.148.279 3.238.364.466.037.893.281 1.153.671L12 21l2.652-3.978c.26-.39.687-.634 1.153-.67 1.09-.086 2.17-.208 3.238-.365 1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
            />
          </svg>
        </button>
      )}
    </>
  );
};

export default ChatbotPopup;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/ChatContainer.tsx

// frontend/src/chatbot/ChatContainer.tsx

import React, { useEffect, useRef } from 'react';
import MessageBubble from './MessageBubble';
import ThinkingAnimation from './ThinkingAnimation';

interface Message {
  isUser: boolean;
  text: string;
}

interface ChatContainerProps {
  messages: Message[];
  isThinking: boolean;
}

const ChatContainer: React.FC<ChatContainerProps> = ({ messages, isThinking }) => {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div
      ref={containerRef}
      className="chat-container flex flex-col space-y-4 overflow-y-auto max-h-[calc(100vh-20px)] p-4"
      style={{
        scrollbarWidth: 'thin',
        scrollbarColor: 'rgba(75, 85, 99, 0.5) rgba(31, 41, 55, 0.5)',
      }}
    >
      {messages.map((message, index) => (
        <MessageBubble key={index} message={message} />
      ))}
      {isThinking && (
        <div className="flex justify-end">
          <ThinkingAnimation />
        </div>
      )}
    </div>
  );
};

export default ChatContainer;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/ThinkingAnimation.tsx

// frontend/src/chatbot/ThinkingAnimation.tsx

import React from 'react';

const ThinkingAnimation: React.FC = () => {
  return (
    <div className="flex items-center space-x-2">
      <div className="w-3 h-3 bg-gray-500 rounded-full animate-bounce"></div>
      <div className="w-3 h-3 bg-gray-500 rounded-full animate-bounce animation-delay-200"></div>
      <div className="w-3 h-3 bg-gray-500 rounded-full animate-bounce animation-delay-400"></div>
    </div>
  );
};

export default ThinkingAnimation;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/ModelSelector.tsx

import React, { useState, useRef, useEffect } from 'react';

interface Model {
  id: string;
  name: string;
}

interface ModelSelectorProps {
  selectedModel: string;
  onModelChange: (event: React.ChangeEvent<HTMLButtonElement>) => void;
  models: Model[];
}

const ModelSelector: React.FC<ModelSelectorProps> = ({
  selectedModel,
  onModelChange,
  models,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  const handleClickOutside = (event: MouseEvent) => {
    if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <div ref={dropdownRef} className="relative inline-block text-left z-50">
      <div>
        <button
          type="button"
          className="inline-flex justify-center w-full rounded-md z-10 border border-gray-600 shadow-sm px-4 py-1 bg-gray-800 text-sm font-medium text-white hover:bg-gray-700 focus:outline-none"
          id="model-menu"
          aria-haspopup="true"
          aria-expanded={isOpen}
          onClick={toggleDropdown}
        >
          {models.find((model) => model.id === selectedModel)?.name || 'Select Model'}
          <svg
            className="-mr-1 ml-2 h-5 w-5"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fillRule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clipRule="evenodd"
            />
          </svg>
        </button>
      </div>
      {isOpen && (
        <div
          className="origin-bottom-right absolute right-0 bottom-full mb-2 w-56 rounded-md shadow-lg bg-gray-800 ring-1 ring-black ring-opacity-5"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="model-menu"
        >
          <div className="py-1" role="none">
            {models.map((model) => (
              <button
                key={model.id}
                className={`${
                  model.id === selectedModel
                    ? 'bg-gray-700 text-white'
                    : 'text-gray-300'
                } block px-4 py-2 text-sm w-full text-left hover:bg-gray-700 hover:text-white`}
                onClick={() => {
                  onModelChange({ target: { value: model.id } } as React.ChangeEvent<HTMLButtonElement>);
                  setIsOpen(false);
                }}
              >
                {model.name}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ModelSelector;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/MessageBubble.tsx

// frontend/src/chatbot/MessageBubble.tsx

import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface Message {
  isUser: boolean;
  text: string;
}

interface MessageBubbleProps {
  message: Message;
}

const CopyButton: React.FC<{ code: string }> = ({ code }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(code);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <button
      className="absolute top-2 right-2 px-2 py-1 bg-gray-800 text-white border border-gray-600 text-sm rounded hover:bg-gray-600 focus:outline-none"
      onClick={handleCopy}
    >
      {copied ? 'Copied!' : 'Copy'}
    </button>
  );
};

const CodeBlock: React.FC<{ language: string; value: string }> = ({ language, value }) => {
  return (
    <div className="relative">
      <SyntaxHighlighter
        style={{ ...vscDarkPlus }}
        language={language}
        PreTag="div"
      >
        {String(value).replace(/\n$/, '')}
      </SyntaxHighlighter>
      <CopyButton code={value} />
    </div>
  );
};

const InlineCode: React.FC = ({ children }) => {
  return (
    <code className="bg-gray-800 text-green-600 px-1 py-0.5 rounded">
      {children}
    </code>
  );
};

const MessageBubble: React.FC<MessageBubbleProps> = ({ message }) => {
  const components = {
    code({ node, inline, className, children, ...props }) {
      const match = /language-(\w+)/.exec(className || '');
      return !inline && match ? (
        <CodeBlock
          language={match[1]}
          value={String(children).replace(/\n$/, '')}
          {...props}
        />
      ) : (
        <InlineCode {...props}>{children}</InlineCode>
      );
    },
  };

  return (
    <div
      className={`${
        message.isUser
          ? 'max-w-[250mm] self-start bg-gray-700 text-gray-200'
          : 'max-w-[250mm] self-end bg-gray-900 text-gray-300'
      } p-4 rounded-lg max-w-[88%]`}
    >
      {message.isUser ? (
        <div className="whitespace-pre-wrap">{message.text}</div>
      ) : (
        <ReactMarkdown components={components}>{message.text}</ReactMarkdown>
      )}
    </div>
  );
};

export default MessageBubble;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/Chatbot.tsx

// frontend/src/chatbot/Chatbot.tsx

import React, { useState, useEffect } from 'react';
import { v4 as uuidv4 } from 'uuid';
import ChatContainer from './ChatContainer';
import ChatForm from './ChatForm';

interface Message {
  isUser: boolean;
  text: string;
}

interface Model {
  id: string;
  name: string;
}

const Chatbot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [selectedModel, setSelectedModel] = useState('');
  const [models, setModels] = useState<Model[]>([]);
  const [isThinking, setIsThinking] = useState(false);
  const [selectedTools, setSelectedTools] = useState<string[]>([]);
  const [tools, setTools] = useState<string[]>([]);
  const [sessionID, setSessionID] = useState(() => {
    const newSessionID = uuidv4();
    console.log('Generated Session ID:', newSessionID);
    return newSessionID;
  });

  useEffect(() => {
    const fetchTools = async () => {
      try {
        const response = await fetch('http://localhost:8010/tools');
        if (response.ok) {
          const data = await response.json();
          setSelectedTools(data.tools);
        }
      } catch (error) {
        console.error('Error fetching tools:', error);
      }
    };

    fetchTools();
  }, []);

  useEffect(() => {
    const fetchTools = async () => {
      try {
        const response = await fetch('http://localhost:8010/tools');
        if (response.ok) {
          const data = await response.json();
          setTools(data.tools);
        }
      } catch (error) {
        console.error('Error fetching tools:', error);
      }
    };

    fetchTools();
  }, []);

  const handleToolsChange = (newSelectedTools: string[]) => {
    setSelectedTools(newSelectedTools);
  };

  useEffect(() => {
    const fetchModels = async () => {
      try {
        const response = await fetch('http://localhost:8010/models');
        if (response.ok) {
          const data = await response.json();
          setModels(data.models);
          setSelectedModel('gpt-3.5-turbo');
        }
      } catch (error) {
        console.error('Error fetching models:', error);
      }
    };

    fetchModels();
  }, []);

  const handleSubmit = async (inputValue: string) => {
    console.log('Sending Session ID:', sessionID);
    const userMessage: Message = { isUser: true, text: inputValue };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setIsThinking(true);
    try {
      const response = await fetch('http://localhost:8010/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          input: inputValue,
          chat_history: messages.map((msg) => ({
            role: msg.isUser ? 'human' : 'ai',
            content: msg.text,
          })),
          model_id: selectedModel,
          selected_tools: selectedTools,
          session_id: sessionID,
        }),
      });
      if (response.ok) {
        const data = await response.json();
        const assistantMessage: Message = { isUser: false, text: data.output };
        setMessages((prevMessages) => [...prevMessages, assistantMessage]);
      }
    } catch (error) {
      console.error('Error:', error);
    }
    setIsThinking(false);
  };

  useEffect(() => {
    console.log('Component mounted with Session ID:', sessionID);
  }, [sessionID]);

  const handleModelChange = (e: React.ChangeEvent<HTMLButtonElement>) => {
    setSelectedModel(e.target.value);
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex-grow overflow-y-auto">
        <ChatContainer messages={messages} isThinking={isThinking} />
      </div>
      <div className="mt-4">
        <ChatForm
          inputValue={inputValue}
          setInputValue={setInputValue}
          onSubmit={handleSubmit}
          selectedModel={selectedModel}
          onModelChange={handleModelChange}
          models={models}
          selectedTools={selectedTools}
          onToolsChange={handleToolsChange}
          tools={tools}
        />
      </div>
    </div>
  );
};

export default Chatbot;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/chatbot/ChatForm.tsx

// frontend/src/chatbot/ChatForm.tsx

import React, { useRef } from 'react';
import ModelSelector from './ModelSelector';
import ToolSelector from './ToolSelector';

interface Model {
  id: string;
  name: string;
}

interface ChatFormProps {
  inputValue: string;
  setInputValue: (value: string) => void;
  onSubmit: (value: string) => void;
  selectedModel: string;
  onModelChange: (event: React.ChangeEvent<HTMLButtonElement>) => void;
  models: Model[];
  selectedTools: string[];
  onToolsChange: (tools: string[]) => void;
  tools: string[];
}

const ChatForm: React.FC<ChatFormProps> = ({
  inputValue,
  setInputValue,
  onSubmit,
  selectedModel,
  onModelChange,
  models,
  selectedTools,
  onToolsChange,
  tools,
}) => {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputValue.trim()) {
      onSubmit(inputValue);
      setInputValue('');
      resetTextareaHeight();
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  const handleInput = (e: React.FormEvent<HTMLTextAreaElement>) => {
    e.currentTarget.style.height = 'inherit';
    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;
    e.currentTarget.style.maxHeight = '300px';
  };

  const resetTextareaHeight = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'inherit';
    }
  };

  return (
    <div className="flex p-3 bg-gray-900 rounded-lg">
      <form onSubmit={handleSubmit} className="flex-grow flex flex-col">
        <textarea
          ref={textareaRef}
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onInput={handleInput}
          onKeyDown={handleKeyDown}
          className="flex-grow px-4 py-2 mb-2 bg-gray-900 text-white focus:outline-none rounded-t-lg overflow-hidden resize-none"
          placeholder="Type your message..."
          style={{ maxHeight: '300px' }}
        />
        <div className="flex justify-between items-center">

          <div className="flex-grow flex justify-end space-x-2">
            <ModelSelector
              selectedModel={selectedModel}
              onModelChange={onModelChange}
              models={models}
            />
            <ToolSelector
              selectedTools={selectedTools}
              onToolsChange={onToolsChange}
              tools={tools}
            />
                      <button
            type="submit"
            className="px-2 py-0.5 bg-gray-800 text-white border border-gray-600 rounded focus:outline-none"
          >
            Send
          </button>
          </div>
        </div>
      </form>
    </div>
  );
};

export default ChatForm;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/components/Preview.tsx

// frontend/src/components/Preview.tsx

import React from 'react';
import NewComponent from './NewComponent';

interface PreviewProps {
  onElementClick: (event: React.MouseEvent<HTMLElement>) => void;
}

export const Preview: React.FC<PreviewProps> = ({ onElementClick }) => {
  return (
    <div className="bg-white shadow-lg p-4 rounded-md w-full max-w-lg" onClick={onElementClick}>
      <NewComponent componentName="ExampleComponent" componentProps={{ /* Pass any props here */ }} />
    </div>
  );
};


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/components/Modal.tsx

import React from 'react';

interface ModalProps {
  element: HTMLElement;
  closeModal: () => void;
}

export const Modal: React.FC<ModalProps> = ({ element, closeModal }) => {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white p-6 rounded-md shadow-lg">
        <h2 className="text-lg font-bold mb-4">Modify Element</h2>
        <p>Element Tag: {element.tagName}</p>
        <button
          onClick={closeModal}
          className="mt-4 px-4 py-2 bg-gray-800 text-gray-400 rounded-md"
        >
          Close
        </button>
      </div>
    </div>
  );
};


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/frontend/src/components/NewComponent.tsx

import React, { useState } from 'react';

const FastCarSelector = () => {
  const [selectedCar, setSelectedCar] = useState('');

  const handleSelect = (e) => {
    setSelectedCar(e.target.value);
  };

  return (
    <div>
      <h2>Select a Fast Car:</h2>
      <select value={selectedCar} onChange={handleSelect}>
        <option value=''>Select a car</option>
        <option value='Ferrari'>Ferrari</option>
        <option value='Lamborghini'>Lamborghini</option>
        <option value='Porsche'>Porsche</option>
        <option value='McLaren'>McLaren</option>
      </select>
      {selectedCar && <p>You selected: {selectedCar}</p>}
    </div>
  );
};

export default FastCarSelector;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/app.py

# backend/app.py
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from langchain.agents import AgentExecutor
from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.chat_message_histories import RedisChatMessageHistory
from langchain_core.messages import BaseMessage, HumanMessage, AIMessage
from agents.create_agent import create_tools_agent
from prompts.default_chat_prompt import create_chat_prompt
from utils.tool_list import tools
from utils.model_selector import get_model
import uuid

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

prompt = create_chat_prompt()

class ChatRequest(BaseModel):
    input: str
    chat_history: list = []
    model_id: str
    selected_tools: list = []

# Initialize Redis Chat History
redis_url = "redis://localhost:6379/0"
message_history = RedisChatMessageHistory(url=redis_url, ttl=3600, session_id="global-session")






@app.post("/chat")
async def chat(request: ChatRequest):
    user_input = request.input
    model_id = request.model_id
    selected_tools = request.selected_tools

    # Generate a unique session_id for the new conversation
    session_id = str(uuid.uuid4())

    # Create a new session for each conversation
    chat_history = RedisChatMessageHistory(session_id=session_id)

    llm = get_model(model_id)
    filtered_tools = [tool for tool in tools if tool.name in request.selected_tools]
    llm_with_tools = llm.bind_tools(filtered_tools)
    agent = create_tools_agent(prompt, llm_with_tools)
    agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

    # Convert RedisChatMessageHistory to a list of BaseMessage objects
    base_messages = [m for m in chat_history.messages if isinstance(m, BaseMessage)]

    result = agent_executor.invoke({"input": user_input, "chat_history": base_messages})

    # Save the conversation in the session
    chat_history.add_user_message(user_input)
    chat_history.add_ai_message(result["output"])

    return {
        "output": result["output"],
        "chat_history": chat_history.messages,
    }

@app.get("/models")
async def get_models():
    return {
        "models": [
            {"id": "gpt-3.5-turbo", "name": "GPT-3.5 Turbo"},
            {"id": "gpt-4o-2024-05-13", "name": "GPT-4 Omni"},
            {"id": "gpt-4-turbo", "name": "GPT-4 Turbo"},
            {"id": "claude-3-haiku", "name": "Claude-3 Haiku"},
            {"id": "claude-3-sonnet", "name": "Claude-3 Sonnet"},
            {"id": "claude-3-opus", "name": "Claude-3 Opus"},
            {"id": "mixtral-8x7b", "name": "Mixtral 8x7b"},
            {"id": "llama3-70b-8192", "name": "Llama3 70b"},
        ]
    }

@app.get("/tools")
async def get_tools():
    return {"tools": [tool.name for tool in tools]}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8010)


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/tools/add_component_to_preview.py

from langchain.agents import tool
import os

@tool
def add_component_to_preview(content: str) -> str:
    """
    Saves the provided content to a hardcoded file path and triggers a preview reload.
    
    Args:
        content (str): The content to save.
    
    Returns:
        str: A message indicating the result of the operation.
    """
    file_path = '/Users/ron/Documents/projects/vite element highlighter/frontend/src/components/NewComponent.tsx'
    
    try:
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'w') as file:
            file.write(content)
        
        # Note: Vite's HMR will automatically detect the file change and reload the preview area.
        
        return f'Content saved to {file_path}. The preview should reload automatically.'
    except Exception as e:
        return f'Error saving content: {str(e)}'


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/agents/create_agent.py

from langchain.agents.format_scratchpad.openai_tools import format_to_openai_tool_messages
from langchain.agents.output_parsers.openai_tools import OpenAIToolsAgentOutputParser


def create_tools_agent(prompt, llm_with_tools):
    agent = (
        {
            "input": lambda x: x["input"],
            "agent_scratchpad": lambda x: format_to_openai_tool_messages(
                x["intermediate_steps"]
            ),
            "chat_history": lambda x: x["chat_history"],
        }
        | prompt
        | llm_with_tools
        | OpenAIToolsAgentOutputParser()
    )
    return agent


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/utils/tool_list.py

#import tools here
from tools.add_component_to_preview import add_component_to_preview

tools = [add_component_to_preview]


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/utils/model_selector.py

# backend/utils/model_selector.py
from langchain_groq import ChatGroq
from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic

def get_model(model_id):
    if model_id == "gpt-3.5-turbo":
        return ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    elif model_id == "gpt-4-turbo":
        return ChatOpenAI(model="gpt-4-turbo", temperature=0)
    elif model_id == "gpt-4o-2024-05-13":
        return ChatOpenAI(model="gpt-4o-2024-05-13", temperature=0)
    elif model_id == "claude-3-haiku":
        return ChatAnthropic(model="claude-3-haiku-20240307", temperature=0)
    elif model_id == "claude-3-sonnet":
        return ChatAnthropic(model="claude-3-sonnet-20240229", temperature=0)
    elif model_id == "claude-3-opus":
        return ChatAnthropic(model="claude-3-opus-20240229", temperature=0)
    elif model_id == "mixtral-8x7b":
        return ChatGroq(model="mixtral-8x7b-32768", temperature=0)
    elif model_id == "llama3-70b-8192":
        return ChatGroq(model="llama3-70b-8192", temperature=0)
    else:
        raise ValueError(f"Unknown model ID: {model_id}")


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/prompts/default_chat_prompt.py

from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder

MEMORY_KEY = "chat_history"

def create_chat_prompt():
    WORKSPACE = "./workspace"
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                '''You are a powerful React-TS component generator. You have been tasked with creating a single component to be previewed by the user. You are expected to create a new React-TS component. The component must use React-TS, be fully self-contained, and adhere to best practices.
                
                Use the provided add_component_to_preview tool to save and display the component to the user's web UI. Ensure the tool is invoked with the correct content and that the content is correctly formatted for a React-ts component.

                You have access to the following tools:
                - add_component_to_preview

                Always ensure that:
                1. The component code is valid and complete.

                2. The saved content should correctly represent the component, including any necessary imports, state management, and styling.
                '''
            ),
            MessagesPlaceholder(variable_name=MEMORY_KEY),
            ("user", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ]
    )
    return prompt


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/src/App.tsx

import React from 'react';
import Slider from './Slider';

const App: React.FC = () => {
  const handleSliderChange = (value: number) => {
    console.log('Slider value:', value);
  };

  return (
    <div>
      <h1>Slider Component</h1>
      <Slider min={0} max={5} step={1} initialValue={0} onChange={handleSliderChange} />
    </div>
  );
};

export default App;


------------------------------------------------

------------------------------------------------
#/Users/ron/Documents/projects/vite element highlighter/backend/src/Slider.tsx

import React, { useState } from 'react';

interface SliderProps {
  min: number;
  max: number;
  step: number;
  initialValue: number;
  onChange: (value: number) => void;
}

const Slider: React.FC<SliderProps> = ({ min, max, step, initialValue, onChange }) => {
  const [value, setValue] = useState(initialValue);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = Number(event.target.value);
    setValue(newValue);
    onChange(newValue);
  };

  return (
    <div>
      <input
        type="range"
        min={min}
        max={max}
        step={step}
        value={value}
        onChange={handleChange}
      />
      <span>{value}</span>
    </div>
  );
};

export default Slider;


------------------------------------------------

